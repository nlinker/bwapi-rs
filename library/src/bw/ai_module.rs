use crate::bw::player::Player;
use crate::bw::position::Position;
use crate::bw::unit::Unit;
use thin_trait_object::*;

#[thin_trait_object]
pub trait AIModule {
    fn on_event(&mut self, event: Event);
}

pub enum Event {
    OnStart,
    OnEnd { is_winner: bool },
    OnFrame,
    OnSendText { text: String },
    OnReceiveText { player: Player, text: String },
    OnPlayerLeft { player: Player },
    OnNukeDetect { target: Position },
    OnUnitDiscover { unit: Unit },
    OnUnitEvade { unit: Unit },
    OnUnitShow { unit: Unit },
    OnUnitHide { unit: Unit },
    OnUnitCreate { unit: Unit },
    OnUnitDestroy { unit: Unit },
    OnUnitMorph { unit: Unit },
    OnUnitRenegade { unit: Unit },
    OnSaveGame { game_name: String },
    OnUnitComplete { unit: Unit },
}

/// `BoxedAIModule` is the synthetic type generated by `thin_trait_object` macro.
/// IDE however, doesn't know about this type and complains a lot, so we
/// use this artificial definitions to keep IDE's mouth shut.
#[cfg(ignore_this)]
pub struct BoxedAIModule<'a>(Box<dyn AIModule>);

// required for ffi layer
unsafe impl cxx::ExternType for BoxedAIModule<'_> {
    type Id = cxx::type_id!("BoxedAIModule");
    type Kind = cxx::kind::Trivial;
}

#[cfg(ignore_this)]
impl<'a> BoxedAIModule<'a> {
    pub fn new<'a, T: AIModule>(t: T) -> Self {
        Self(t)
    }
}

// https://github.com/kotauskas/thin_trait_object/issues/2
unsafe impl Send for BoxedAIModule<'_> {}
unsafe impl Sync for BoxedAIModule<'_> {}
